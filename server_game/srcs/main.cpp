/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hmaciel- <hmaciel-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/11 14:01:39 by hmaciel-          #+#    #+#             */
/*   Updated: 2024/02/16 10:43:23 by hmaciel-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long_server.hpp"
#include "ClientServer.hpp"

void    broadcast(std::string message, std::vector<sf::TcpSocket*> clientServers)
{
    if (message.size() > 0)
    {
        for (size_t curr_cli = 0; curr_cli < clientServers.size(); curr_cli++)
        {
            sf::Packet broadcast;
            std::string final_message = "Server: " + message;
            broadcast << final_message;
            clientServers[curr_cli]->send(broadcast);
        }
    }
    std::cerr << "Error: broadcast: Empty message\n";
}

int main(int argc, char const *argv[])
{
    (void)argc;
    (void)argv;
    sf::TcpListener             listener;
    sf::SocketSelector          selector;
    bool                        done = false;
    std::vector<sf::TcpSocket*> client_sockets;
    std::vector<ClientServer*>        client_info;

    listener.listen(3000);
    selector.add(listener);
    std::string id;
    
    while(!done)
    {
        if (selector.wait())
        {
            if (selector.isReady(listener))
            {
                sf::TcpSocket   *socket = new sf::TcpSocket;
                ClientServer    *new_client = new ClientServer();
                
                listener.accept(*socket);
                sf::Packet first_receive;
                if (socket->receive(first_receive) == sf::Socket::Done)
                {
                    const void          *address = static_cast<const void*>(socket);
                    std::stringstream   ss;
                    ss << address;
                    new_client->set_player_info(first_receive);
                    new_client->set_unique_id(ss.str());
                }
                
                std::cout << new_client->get_name() << " has connected to the server" << std::endl;
                client_sockets.push_back(socket);
                client_info.push_back(new_client);
                selector.add(*socket);
                sf::Packet first_send; // to send the unique id generated by server;
                first_send = new_client->get_player_info();
                std::cout << *new_client << std::endl;
                socket->send(first_send);
            }
            else
            {
                for (size_t curr_cli = 0; curr_cli < client_sockets.size(); curr_cli++)
                {
                    if (selector.isReady(*client_sockets[curr_cli]))
                    {
                        sf::Packet packet, send_packet;
                        if(client_sockets[curr_cli]->receive(packet) == sf::Socket::Done)
                        {
                            ClientServer tmp;
                            tmp.set_player_info(packet);
                            std::cout << tmp << std::endl;

                            send_packet = tmp.get_player_pos_packet();
                            // client_info[curr_cli]->set_player_info(packet);
                            for (size_t other_cli = 0; other_cli < client_sockets.size(); other_cli++)
                            {   
                                if (curr_cli != other_cli)
                                    client_sockets[other_cli]->send(send_packet);
                            }
                        }
                    }
                }
            }
        }
    }

    for (std::vector<sf::TcpSocket*>::iterator it = client_sockets.begin(); it != client_sockets.end(); it++)
        delete *it;
    for (std::vector<ClientServer*>::iterator it = client_info.begin(); it != client_info.end(); it++)
        delete *it;
    
    return 0;
}
